{"version":3,"sources":["NumberTable.js","Cell.js","helper.js","App.js","index.js"],"names":["NumberTable","children","styled","div","Cell","props","Button","button","status","className","onClick","onCellClick","value","id","isChecked","numbers","i","length","checkPair","newCell","currentCell","console","log","App","state","current","handleCellClick","evt","cell","parseInt","target","attributes","setState","prevState","map","item","number","Object","assign","handleResetClick","reset","this","NumberTableContainer","type","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05c1dff7.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nfunction NumberTable({ children }) {\n  const NumberTable = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px;\n    width: fit-content;\n    margin-bottom: 30px;\n  `;\n  return <NumberTable>{children}</NumberTable>;\n}\n\nexport default NumberTable;\n","import styled from \"@emotion/styled\";\n\nfunction Cell(props) {\n  const Button = styled.button`\n    font-size: x-large;\n    padding: 20px;\n    border: none;\n    background-color: rgb(110, 133, 235);\n    text-align: center;\n    ${(props) => {\n      if (!props.status) return;\n      if (props.status === \"active\")\n        return \"background-color: rgb(92, 219, 134)\";\n      return `background-color: rgb(41, 41, 41);\n              color: rgb(124, 120, 120);\n              text-decoration: line-through;`;\n    }}\n  `;\n\n  // console.log(Button);\n  return (\n    <Button\n      className={props.status ? `Cell ${props.status}` : \"Cell\"}\n      status={props.status}\n      onClick={props.onCellClick}\n      value={props.value}\n      id={props.id}\n    >\n      {props.value}\n    </Button>\n  );\n}\n\nexport default Cell;\n","export const isChecked = (id, numbers) => {\n  // const numbers = ;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i].id === id && numbers[i].status === \"checked\") return true;\n  }\n  return false;\n};\n\nexport const checkPair = (newCell, currentCell) => {\n  console.log(newCell);\n  console.log(currentCell);\n  if (newCell.id !== currentCell.id && newCell.value === currentCell.value)\n    return true;\n  return false;\n};\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\n\nimport NumberTable from \"./NumberTable\";\nimport Cell from \"./Cell\";\n\n// Import helper function\nimport { isChecked, checkPair } from \"./helper\";\n\nclass App extends React.Component {\n  state = {\n    current: {\n      id: 0,\n      value: 0,\n    },\n    numbers: [],\n  };\n\n  // Initialize state\n  componentDidMount() {\n    this.reset();\n  }\n\n  handleCellClick = (evt) => {\n    // const event = evt.target.attributes;\n    const cell = {\n      id: parseInt(evt.target.attributes.id.value),\n      value: parseInt(evt.target.attributes.value.value),\n    };\n    // If current cell is already checked, return;\n    if (isChecked(cell.id, this.state.numbers)) return;\n\n    /**\n     * In case of the newly clicked cell have same value as the previous one\n     * Wil iterate through <numbers> state and re-assign < { status: \"checked\" } >\n     * to these two objects and setState\n     * And return from handleCellClick()\n     */\n    if (checkPair(cell, this.state.current)) {\n      this.setState((prevState, props) => {\n        return {\n          numbers: prevState.numbers.map((item) => {\n            if (item.number === cell.value)\n              return Object.assign({}, item, { status: \"checked\" });\n            return item;\n          }),\n        };\n      });\n      return;\n    }\n\n    /**\n     * Default setState behavior; setState newly clicked cell with { status: \"active\" }\n     * And if any cell is 'checked' will leave its status as that,\n     * otherwise set status to false(reset).\n     */\n    this.setState((prevState, props) => {\n      const numbers = prevState.numbers.map((item) => {\n        if (item.id === cell.id)\n          return Object.assign({}, item, { status: \"active\" });\n        return Object.assign({}, item, {\n          status: item.status === \"checked\" ? \"checked\" : false,\n        });\n      });\n\n      // Return object to setState()\n      return {\n        current: { id: cell.id, value: cell.value },\n        numbers: numbers,\n      };\n    });\n  };\n\n  handleResetClick = () => {\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      current: {\n        id: 0,\n        value: 0,\n      },\n      numbers: [\n        {\n          id: 1,\n          number: 1,\n          status: false,\n        },\n        {\n          id: 2,\n          number: 1,\n          status: false,\n        },\n        {\n          id: 3,\n          number: 2,\n          status: false,\n        },\n        {\n          id: 4,\n          number: 2,\n          status: false,\n        },\n        {\n          id: 5,\n          number: 3,\n          status: false,\n        },\n        {\n          id: 6,\n          number: 3,\n          status: false,\n        },\n        {\n          id: 7,\n          number: 4,\n          status: false,\n        },\n        {\n          id: 8,\n          number: 4,\n          status: false,\n        },\n        {\n          id: 9,\n          number: 5,\n          status: false,\n        },\n        {\n          id: 10,\n          number: 5,\n          status: false,\n        },\n        {\n          id: 11,\n          number: 6,\n          status: false,\n        },\n        {\n          id: 12,\n          number: 6,\n          status: false,\n        },\n      ],\n    });\n  };\n\n  render() {\n    const NumberTableContainer = styled.div`\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n    `;\n\n    return (\n      <NumberTableContainer>\n        <h1>Hello Matching Number Game !</h1>\n        <NumberTable>\n          {this.state.numbers.map((item) => (\n            <Cell\n              key={item.id}\n              id={item.id}\n              value={item.number}\n              status={item.status}\n              onCellClick={this.handleCellClick}\n            />\n          ))}\n        </NumberTable>\n        <input type=\"button\" value=\"Reset\" onClick={this.handleResetClick} />\n      </NumberTableContainer>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}